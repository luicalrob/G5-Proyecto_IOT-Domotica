#include <ESP8266WiFi.h>
extern "C" {
            #include <espnow.h>
            }
#include "DHTesp.h"

// MAC placa LUIS: F6 CF A2 68 68 FC
// MAC placa PEDRO: CA:2B:96:2F:46:AA
// this is the MAC Address of the remote ESP server which receives these sensor readings
uint8_t remoteMac[] = {0xF6, 0xCF, 0xA2, 0x68, 0x68, 0xFC};

#define WIFI_CHANNEL 4
#define SLEEP_SECS 15 * 60 // 15 minutes
#define SEND_TIMEOUT 245  // 245 millis seconds timeout 

// keep in sync with slave struct
struct __attribute__((packed)) SENSOR_DATA {
    float temp;
    float humidity;
    float luminosidad;
} sensorData;

// BME280 bme280;
DHTesp dht;

volatile boolean callbackCalled;

void gotoSleep() ;

//PARTE DE MEDICIÃ“N DE LUMINOSIDAD
//Enciende led dependiendo de si supera un umbral de luminosidad:
const int LEDPin = 16;
const int LDRPin = A0;
const int threshold = 100; %pocentaje de mas del 10% para encender el led

void setup() {
  Serial.begin(115200); 
  pinMode(LEDPin, OUTPUT);
  pinMode(LDRPin, INPUT);
  Serial.println();
  Serial.println("Status\tHumidity (%)\tTemperature (C)\t(F)\tHeatIndex (C)\t(F)");
  
  dht.setup(5, DHTesp::DHT11); // Connect DHT sensor to GPIO 5
  
  WiFi.mode(WIFI_STA); // Station mode for esp-now sensor node
  WiFi.disconnect();

  Serial.printf("This mac: %s, ", WiFi.macAddress().c_str()); 
  Serial.printf("target mac: %02x%02x%02x%02x%02x%02x", remoteMac[0], remoteMac[1], remoteMac[2], remoteMac[3], remoteMac[4], remoteMac[5]); 
  Serial.printf(", channel: %i\n", WIFI_CHANNEL); 

  if (esp_now_init() != 0) {
    Serial.println("*** ESP_Now init failed");
    gotoSleep();
    }

  esp_now_set_self_role(ESP_NOW_ROLE_CONTROLLER);
  esp_now_add_peer(remoteMac, ESP_NOW_ROLE_SLAVE, WIFI_CHANNEL, NULL, 0);

  esp_now_register_send_cb([](uint8_t* mac, uint8_t sendStatus) {
    Serial.printf("send_cb, send done, status = %i\n", sendStatus);
    callbackCalled = true;});

  callbackCalled = false;

  uint8_t bs[sizeof(sensorData)];
  memcpy(bs, &sensorData, sizeof(sensorData));
  
}

void loop() {
  int input = analogRead(LDRPin);
  int brightness = map(input, 0, 1000, 0, 100);//porcentaje de luminosidad

   
  if (callbackCalled || (millis() > SEND_TIMEOUT)) {
    gotoSleep();
  }
  else {
    delay(dht.getMinimumSamplingPeriod());
    sensorData.humidity = dht.getHumidity();
    sensorData.temp = dht.getTemperature();
    sensorData.lum = brightness;
    Serial.printf("temp=%01f, humidity=%01f, luminosidad=%01f", sensorData.temp, sensorData.humidity, sensorData.lum);
    Serial.print(dht.getStatusString());
    Serial.print("\t");
    Serial.print(sensorData.humidity, 1);
    Serial.print("\t\t");
    Serial.print(sensorData.temp, 1);
    Serial.print("\t\t");
    Serial.print(sensorData.lum, 1);
    Serial.print("\t\t");
    esp_now_send(remoteMac, (uint8_t *)&sensorData, sizeof(sensorData)); // NULL means send to all peers

      
   Serial.println(brightness);
  
   if (input > threshold) {
      digitalWrite(LEDPin, HIGH);
   }
   else {
      digitalWrite(LEDPin, LOW);
   }
   
  }
}



void gotoSleep() {
  // add some randomness to avoid collisions with multiple devices
  int sleepSecs = SLEEP_SECS + ((uint8_t)RANDOM_REG32/2); 
  Serial.printf("Up for %i ms, going to sleep for %i secs...\n", millis(), sleepSecs); 
  ESP.deepSleep(sleepSecs * 1000000, RF_NO_CAL);
}
