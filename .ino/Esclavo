/**
 * 
 * Author: Andreas Spiess, 2017
 * Slightly adapted by Diy_bloke 2020
  This sketch receives ESP-Now message and sends it as an MQTT messge
  It is heavily based on of Anthony's gateway setch sketch
https://github.com/HarringayMakerSpace/ESP-Now
Anthony Elder
 */
#include <ESP8266WiFi.h>
#include "PubSubClient.h"
#include <ArduinoJson.h>
WiFiClient wClient;
PubSubClient mqtt_client(wClient);

//Infrarrojo, aire acondicionado
#include <Arduino.h>
#include <IRremoteESP8266.h>
#include <IRsend.h>
#include <ir_Mitsubishi.h>
const uint16_t kIrLed = 4;  // ESP8266 GPIO pin to use. Recommended: 4 (D2).
IRMitsubishiAC ac(kIrLed);  // Set the GPIO used for sending messages.

extern "C" {
  #include "user_interface.h"
  #include <espnow.h>
}

//FOTA//
// NO OLVIDAR ESCRIBIR LOS COMANDOS EN LA MAQUINA VIRTUAL //
/*Creamos una carpeta donde se guardan los archivos:
   cd OTA
   ls -l
   pwd
 * */
#include <ESP8266httpUpdate.h>

// datos para actualización   >>>> SUSTITUIR IP <<<<<
#define HTTP_OTA_ADDRESS      F("192.168.1.147")         // Address of OTA update server
#define HTTP_OTA_PATH         F("/esp8266-ota/update") // Path to update firmware
#define HTTP_OTA_PORT         1880                     // Port of update server
                                                       // Name of firmware
                                                        // Name of firmware
#define HTTP_OTA_VERSION      String(__FILE__).substring(String(__FILE__).lastIndexOf('\\')+1) + ".nodemcu" 
//
//const char* ssid = "MiFibra-1738";
//const char* password = "zn6TAwZx";
//
const char* ssid = "MIWIFI_2G_sfPG";
const char* password = "Sx5ihL4q";

// GPIOs
int LED_blink = 2;
int LED_OTA = 16;
// funciones para progreso de OTA
void progreso_OTA(int, int);
void final_OTA();
void inicio_OTA();
void error_OTA(int);

//-----------------------------------------------------
void intenta_OTA()
{ 
  Serial.println( "------------------------------" );  
  Serial.println( "Comprobando actualización:" );
  Serial.print(HTTP_OTA_ADDRESS);Serial.print(":");Serial.print(HTTP_OTA_PORT);Serial.println(HTTP_OTA_PATH);
  Serial.println( "--------------------------" );  
  ESPhttpUpdate.setLedPin(LED_blink, LOW);
  ESPhttpUpdate.onStart(inicio_OTA);
  ESPhttpUpdate.onError(error_OTA);
  ESPhttpUpdate.onProgress(progreso_OTA);
  ESPhttpUpdate.onEnd(final_OTA);
  WiFiClient wClient;
  switch(ESPhttpUpdate.update(wClient, HTTP_OTA_ADDRESS, HTTP_OTA_PORT, HTTP_OTA_PATH, HTTP_OTA_VERSION)) {
    case HTTP_UPDATE_FAILED:
      Serial.printf(" HTTP update failed: Error (%d): %s\n", ESPhttpUpdate.getLastError(), ESPhttpUpdate.getLastErrorString().c_str());
      break;
    case HTTP_UPDATE_NO_UPDATES:
      Serial.println(F(" El dispositivo ya está actualizado"));
      break;
    case HTTP_UPDATE_OK:
      Serial.println(F(" OK"));
      break;
    }
}

//-----------------------------------------------------
void final_OTA()
{
  Serial.println("Fin OTA. Reiniciando...");
}

void inicio_OTA()
{
  Serial.println("Nuevo Firmware encontrado. Actualizando...");
}

void error_OTA(int e)
{
  char cadena[64];
  snprintf(cadena,64,"ERROR: %d",e);
  Serial.println(cadena);
}

void progreso_OTA(int x, int todo)
{
  char cadena[256];
  int progress=(int)((x*100)/todo);
  if(progress%10==0)
  {
    snprintf(cadena,256,"Progreso: %d%% - %dK de %dK",progress,x/1024,todo/1024);
    Serial.println(cadena);
  }
}



//SUBSCRIBIR A TOPIC
const char* mqtt_server = "iot.ac.uma.es";
const char* mqtt_user = "II5";
const char* mqtt_pass = "2X3TlFVH";

#define topic_SUB "infind/ESPNOW/Sistema"



//-------- Customise the above values --------
#define SENDTOPIC "infind/ESPNow/key"
#define COMMANDTOPIC "ESPNow/command"
#define SERVICETOPIC "ESPNow/service"

#define Topic_Tiempo "infind/ESPNOW/Meteorologia"
#define Topic_Estado "infind/ESPNOW/Estado"

/* Set a private Mac Address
 *  http://serverfault.com/questions/40712/what-range-of-mac-addresses-can-i-safely-use-for-my-virtual-machines
 * Note: the point of setting a specific MAC is so you can replace this Gateway ESP8266 device with a new one
 * and the new gateway will still pick up the remote sensors which are still sending to the old MAC 
 */

 //CA:2B:96:2F:46:AA Mac de Pedro
 //F6:CF:A2:68:68:FC MAC de Luis
 //46:17:93:0D:4C:33 MAC de David
 uint8_t mac1[] = {0xCA, 0x2B, 0x96, 0x2F, 0x46, 0xAA};// MAC de Master 1
 uint8_t mac2[] = {0xCA, 0x2B, 0x96, 0x2F, 0x46, 0xAA};// MAC de MAster 2
 uint8_t mac3[] = {0x46, 0x17, 0x93, 0x0D, 0x4C, 0x33};// MAC de Master 3
 
uint8_t mac[] = {0xF6, 0xCF, 0xA2, 0x68, 0x68, 0xFC};// your MAC
void initVariant() {
  //wifi_set_macaddr(SOFTAP_IF, &mac[0]);
}


//----------------//Infrarrojo, aire acondicionado//---------//
void printState() {
  // Display the settings.
  Serial.println("Mitsubishi A/C remote is in the following state:");
  Serial.printf("  %s\n", ac.toString().c_str());
  // Display the encoded IR sequence.
  unsigned char* ir_code = ac.getRaw();
  Serial.print("IR Code: 0x");
  for (uint8_t i = 0; i < kMitsubishiACStateLength; i++)
    Serial.printf("%02X", ir_code[i]);
  Serial.println();
}
int estado_anterior=0;
int estado_actual=0;
//-----------------------------------------------------
void callback(char* topic, byte* payload, unsigned int length) {
  char *mensaje = (char *)malloc(length+1); // reservo memoria para copia del mensaje
  strncpy(mensaje, (char*)payload, length); // copio el mensaje en cadena de caracteres
  mensaje[length]='\0'; // caracter cero marca el final de la cadena
  Serial.printf("Mensaje recibido [%s] %s\n", topic, mensaje);
  // compruebo el topic
  
  if(strcmp(topic, topic_SUB)==0) 
  {
    if (mensaje[0] == '1') {
        digitalWrite(BUILTIN_LED, LOW);   // Turn the LED on (Note that LOW is the voltage level 
          ac.on();
          estado_actual=1;
          
      } else {
        digitalWrite(BUILTIN_LED, HIGH);  // Turn the LED off by making the voltage HIGH
        ac.off();
        estado_actual=0;
      }
      if(estado_anterior==estado_actual)
      {}
      else
      {
        estado_anterior=estado_actual;
          #if SEND_MITSUBISHI_AC
          Serial.println("Sending IR command to A/C ...");
          ac.send();
          #endif  // SEND_MITSUBISHI_AC
          printState();
      }
          
  }
  free(mensaje);
}


//----------------------------------------------------------------//
IPAddress server(192, 168, 1, 36);//your MQTT Broker address

const char deviceTopic[] = "ESPNOW/";

WiFiClient wifiClient;
PubSubClient client("iot.ac.uma.es", 1883, wifiClient);

String deviceMac;

// keep in sync with ESP_NOW sensor struct
struct __attribute__((packed)) SENSOR_DATA {
  bool tactil;
  bool presencia;
} sensorData_Est;

struct mensaje1 {
  bool tactil;
  bool presencia;
  bool ok;
};

struct __attribute__((packed)) SENSOR_DATA_Temp {
    float temp;
    float humidity;
    float lum;
} sensorData_Temp;

struct mensaje2 {
  float temp;
    float humidity;
    float lum;
};
int tipo=0; //tipo de dato que le llega, al principio no es ninguno de los dos(1 o 2);

volatile boolean haveReading = false;

/* Presently it doesn't seem posible to use both WiFi and ESP-NOW at the
 * same time. This gateway gets around that be starting just ESP-NOW and
 * when a message is received switching on WiFi to sending the MQTT message
 * to Watson, and then restarting the ESP. The restart is necessary as 
 * ESP-NOW doesn't seem to work again even after WiFi is disabled.
 * Hopefully this will get fixed in the ESP SDK at some point.
 */

int heartBeat;


void setup() {
  Serial.begin(115200);
  //aire aondicionado
    ac.begin();
  ac.setFan(1);
  ac.setMode(kMitsubishiAcCool);
  ac.setTemp(24);
  ac.setVane(kMitsubishiAcVaneAuto);
  
  //Subcribir
  mqtt_client.setServer(mqtt_server, 1883);
  mqtt_client.setBufferSize(512); // para poder enviar mensajes de hasta X bytes
  mqtt_client.setCallback(callback);
  
  //FOTA//
  pinMode(LED_blink, OUTPUT);     // Initialize the LED_BUILTIN pin as an output
  pinMode(LED_OTA, OUTPUT); 
  digitalWrite(LED_blink, LOW);   // LED on
  wifiConnect();
  intenta_OTA();
  
  Serial.println();
  Serial.println();
  Serial.println("ESP_Now Controller");
    Serial.println();

  WiFi.mode(WIFI_AP);
  Serial.print("This node AP mac: "); Serial.println(WiFi.softAPmacAddress());
  Serial.print("This node STA mac: "); Serial.println(WiFi.macAddress());

  initEspNow();  
  Serial.println("Setup done");
}


void loop() {
  if (millis()-heartBeat > 30000) {
    Serial.println("Waiting for ESP-NOW messages...");
    heartBeat = millis();
  }

  if (haveReading) {
    haveReading = false;
    if (WiFi.status() != WL_CONNECTED)
      {
        wifiConnect();
      }
    if (!client.connected()) 
      {
        reconnectMQTT();
      }
    sendToBroker(); 
    
    client.disconnect();
    delay(200);
    ESP.restart(); // <----- Reboots to re-enable ESP-NOW
  }
  digitalWrite(LED_blink, HIGH);   // LED off
}

void sendToBroker() {
  //Serial.printf("El tipo es %0.2f", tipo);
  if(tipo==1)
  {
    //Serial.println(sensorData_Est.tactil);
    String payload = "{";
    payload += "\"tactil\":\"" + String(sensorData_Est.tactil);
    payload += "\",\"presencia\":\""+String(sensorData_Est.presencia);
    payload += "\"}";
    Serial.println(payload);
    publishMQTT(Topic_Estado,payload);
  }
  if(tipo==2)
  {
    //Serial.println(sensorData_Est.tactil);
    String payload = "{";
    payload += "\"Temperatura\":\"" + String(sensorData_Temp.temp);
    payload += "\",\"Humedad\":\""+String(sensorData_Temp.humidity);
    payload += "\",\"Luminosidad\":\""+String(sensorData_Temp.lum);
    payload += "\"}";
    Serial.println(payload);
    publishMQTT(Topic_Tiempo,payload);
  }
}

void initEspNow() {

  if (esp_now_init()!=0) {
    Serial.println("*** ESP_Now init failed");
    ESP.restart();
  }

  esp_now_set_self_role(ESP_NOW_ROLE_COMBO);

  esp_now_register_recv_cb([](uint8_t *mac, uint8_t *data, uint8_t len) {

    deviceMac = "";
    deviceMac += String(mac[0], HEX);
    deviceMac += String(mac[1], HEX);
    deviceMac += String(mac[2], HEX);
    deviceMac += String(mac[3], HEX);
    deviceMac += String(mac[4], HEX);
    deviceMac += String(mac[5], HEX);
     
    if(mac[5]==mac3[5])
    {
      tipo=1;
      Serial.printf("El tipo es %d", tipo);
      memcpy(&sensorData_Est, data, sizeof(sensorData_Est));
        struct mensaje1 mi_mensaje1;
      memcpy(&mi_mensaje1, data, sizeof(mi_mensaje1));
      
      Serial.print("Message received from device: "); 
      Serial.println(deviceMac);
      //Serial.printf(" Tactil=%0.2f, Presencia=%0.0f%%", sensorData.tactil, sensorData.presencia); 
      Serial.print("\nBytes recibidos:");   
      Serial.println(len); 
      Serial.print("Tactil:");   
      Serial.println(mi_mensaje1.tactil); 
      Serial.print("Presencia:");   
      Serial.println(mi_mensaje1.presencia); 
    }
    if(mac[5]==mac1[5] || mac[5]==mac2[5])
    {
      tipo=2;
      memcpy(&sensorData_Temp, data, sizeof(sensorData_Temp));
      struct mensaje2 mi_mensaje2;
      memcpy(&mi_mensaje2, data, sizeof(mi_mensaje2));
      
      Serial.print("Message received from device: "); 
      Serial.println(deviceMac);
      //Serial.printf(" Tactil=%0.2f, Hum=%0.0f%%", sensorData.tactil, sensorData.presencia); 
      Serial.print("\nBytes recibidos:");   
      Serial.println(len); 
      Serial.printf(" Temperatura=%0.2f, Humedad=%0.0f%%, Luminosidad=%0.2f%%", sensorData_Temp.temp, sensorData_Temp.humidity, sensorData_Temp.lum); 
    }
    haveReading = true;
  });
}

void wifiConnect() {
  WiFi.mode(WIFI_STA);
  Serial.println();
  Serial.print("Connecting to "); Serial.print(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
     delay(250);
     Serial.print(".");
  }  
  Serial.print("\nWiFi connected, IP address: "); Serial.println(WiFi.localIP());
}

void publishMQTT(String topic, String message) {
  Serial.println("Publish");
  if (!client.connected()) {
    reconnectMQTT();
  }
  //Serial.printf("El tipo es %0.2f", tipo);
  if(tipo==1)
  {
    digitalWrite(LED_blink, LOW);   // LED on
  client.publish(Topic_Estado, message.c_str());
  }
  if(tipo==2)
  {
    digitalWrite(LED_blink, LOW);   // LED on
    client.publish(Topic_Tiempo, message.c_str());
  }
}

void reconnectMQTT() {
  Serial.println(" Loop until we're reconnected");
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP-NOWClient-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    
      if (client.connect(clientId.c_str(),"infind","zancudo")) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      mqtt_client.subscribe(topic_SUB);
      client.publish(SERVICETOPIC, "I am live");
      // ... and resubscribe
      //  client.subscribe("inTopic");
    } else {
      Serial.print("failed, rc = ");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(2000);
    }
  }
}
