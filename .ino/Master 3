#include <ESP8266WiFi.h>
extern "C" {
#include <espnow.h>
}

//FOTA//
// NO OLVIDAR ESCRIBIR LOS COMANDOS EN LA MAQUINA VIRTUAL //
/*Creamos una carpeta donde se guardan los archivos:
   cd OTA
   ls -l
   pwd
 * */
#include <ESP8266httpUpdate.h>

// datos para actualizaci칩n   >>>> SUSTITUIR IP <<<<<
#define HTTP_OTA_ADDRESS      F("192.168.1.147")         // Address of OTA update server
#define HTTP_OTA_PATH         F("/esp8266-ota/update") // Path to update firmware
#define HTTP_OTA_PORT         1880                     // Port of update server
                                                       // Name of firmware
                                                        // Name of firmware
#define HTTP_OTA_VERSION      String(__FILE__).substring(String(__FILE__).lastIndexOf('\\')+1) + ".nodemcu" 
//
const char* ssid = "MiFibra-1738";
const char* password = "zn6TAwZx";
//
//const char* ssid = "Araceli";
//const char* password = "chinitonto";

// GPIOs
int LED_blink = 2;
int LED_OTA = 16;
// funciones para progreso de OTA
void progreso_OTA(int, int);
void final_OTA();
void inicio_OTA();
void error_OTA(int);

//-----------------------------------------------------
void intenta_OTA()
{ 
  Serial.println( "------------------------------" );  
  Serial.println( "Comprobando actualizaci칩n:" );
  Serial.print(HTTP_OTA_ADDRESS);Serial.print(":");Serial.print(HTTP_OTA_PORT);Serial.println(HTTP_OTA_PATH);
  Serial.println( "--------------------------" );  
  ESPhttpUpdate.setLedPin(LED_blink, LOW);
  ESPhttpUpdate.onStart(inicio_OTA);
  ESPhttpUpdate.onError(error_OTA);
  ESPhttpUpdate.onProgress(progreso_OTA);
  ESPhttpUpdate.onEnd(final_OTA);
  WiFiClient wClient;
  switch(ESPhttpUpdate.update(wClient, HTTP_OTA_ADDRESS, HTTP_OTA_PORT, HTTP_OTA_PATH, HTTP_OTA_VERSION)) {
    case HTTP_UPDATE_FAILED:
      Serial.printf(" HTTP update failed: Error (%d): %s\n", ESPhttpUpdate.getLastError(), ESPhttpUpdate.getLastErrorString().c_str());
      break;
    case HTTP_UPDATE_NO_UPDATES:
      Serial.println(F(" El dispositivo ya est치 actualizado"));
      break;
    case HTTP_UPDATE_OK:
      Serial.println(F(" OK"));
      break;
    }
}

//-----------------------------------------------------
void final_OTA()
{
  Serial.println("Fin OTA. Reiniciando...");
}

void inicio_OTA()
{
  Serial.println("Nuevo Firmware encontrado. Actualizando...");
}

void error_OTA(int e)
{
  char cadena[64];
  snprintf(cadena,64,"ERROR: %d",e);
  Serial.println(cadena);
}

void progreso_OTA(int x, int todo)
{
  char cadena[256];
  int progress=(int)((x*100)/todo);
  if(progress%10==0)
  {
    snprintf(cadena,256,"Progreso: %d%% - %dK de %dK",progress,x/1024,todo/1024);
    Serial.println(cadena);
  }
}
//-----------------------------------------------------
void conecta_wifi() {
  Serial.printf("\nConnecting to %s:\n", ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(200);
    Serial.print(".");
  }
  Serial.printf("\nWiFi connected, IP address: %s\n", WiFi.localIP().toString().c_str());
}


//SENSOR TACTIL//
const int sensorPin = 5; //D1
bool Cont_detectado = false;
//SENSOR PRESENCIA//
//int LEDPin= 2;
const int PIRPin = 14; // D5

//ESPNOW//
// MAC placa LUIS: F6:CF:A2:68:68:FC
// MAC placa PEDRO: CA:2B:96:2F:46:AA
// MAC placa DAVID: 46:17:93:0D:4C:33
// this is the MAC Address of the remote ESP server which receives these sensor readings
uint8_t remoteMac[] = {0xF6, 0xCF, 0xA2, 0x68, 0x68, 0xFC};
#define WIFI_CHANNEL 4
volatile boolean callbackCalled;

//SLEEP//
void gotoSleep() ;
#define SLEEP_SECS 0 //No podemos enviarlo a dormir          //15 * 60 // 15 minutes
#define SEND_TIMEOUT 245  // 245 millis seconds timeout 

// keep in sync with slave struct
struct __attribute__((packed)) SENSOR_DATA {
  bool tactil = false;
  bool presencia = false;
} sensorData;




void setup() {
  Serial.begin(115200);
  //FOTA//
  pinMode(LED_blink, OUTPUT);     // Initialize the LED_BUILTIN pin as an output
  pinMode(LED_OTA, OUTPUT); 
  digitalWrite(LED_blink, LOW);   // LED on
  conecta_wifi();
  intenta_OTA();
  //SENSOR TACTIL//
  pinMode(sensorPin, INPUT);
  //SENSOR PRESENCIA//
  //  pinMode(LEDPin, OUTPUT);
  pinMode(PIRPin, INPUT);

  Serial.println();
  Serial.println("Status\tTactil \tPresencia");

  //ESPNOW
  WiFi.mode(WIFI_STA); // Station mode for esp-now sensor node
  WiFi.disconnect();

  Serial.printf("This mac: %s, ", WiFi.macAddress().c_str());
  Serial.printf("target mac: %02x%02x%02x%02x%02x%02x", remoteMac[0], remoteMac[1], remoteMac[2], remoteMac[3], remoteMac[4], remoteMac[5]);
  Serial.printf(", channel: %i\n", WIFI_CHANNEL);

  if (esp_now_init() != 0) {
    Serial.println("*** ESP_Now init failed");
    //gotoSleep();
  }

  esp_now_set_self_role(ESP_NOW_ROLE_CONTROLLER);
  esp_now_add_peer(remoteMac, ESP_NOW_ROLE_SLAVE, WIFI_CHANNEL, NULL, 0);

  esp_now_register_send_cb([](uint8_t* mac, uint8_t sendStatus) {
    Serial.printf("send_cb, send done, status = %i\n", sendStatus);
    callbackCalled = true;
  });

  callbackCalled = false;

  uint8_t bs[sizeof(sensorData)];
  memcpy(bs, &sensorData, sizeof(sensorData));

}

void loop() {

  //SENSOR PRESENCIA//
  int value = digitalRead(PIRPin);
  if (value == HIGH)
  {
    sensorData.presencia = true;
  }
  else
  {
    sensorData.presencia = false;
    
  }

  //SENSOR TACTIL
  int estado = digitalRead(sensorPin);

  //mandar mensaje a puerto serie en funci칩n del valor leido
  if (estado == HIGH)
  {
    sensorData.tactil = true;
    Serial.println("Contacto detectado");
  }
  else {
    sensorData.tactil = false;

  }
  
  //Serial.printf("presencia=%01f, tactil=%01f", sensorData.presencia, sensorData.tactil);
  Serial.print(sensorData.presencia, 1);
  Serial.print("\t\t");
  Serial.print(sensorData.tactil, 1);
  Serial.print("\t\t");
  //if (sensorData.tactil == true || sensorData.presencia == true){
  esp_now_send(remoteMac, (uint8_t *)&sensorData, sizeof(sensorData));
  //}
  //}
}

void gotoSleep() {
  // add some randomness to avoid collisions with multiple devices
  int sleepSecs = SLEEP_SECS + ((uint8_t)RANDOM_REG32 / 2);
  Serial.printf("Up for %i ms, going to sleep for %i secs...\n", millis(), sleepSecs);
  ESP.deepSleep(sleepSecs * 1000000, RF_NO_CAL);
}
