#include <ESP8266WiFi.h>
extern "C" {
  #include <espnow.h>
}
//SENSOR TACTIL//
const int sensorPin = 5;
bool Cont_detectado = false;
//SENSOR PRESENCIA//
const int LEDPin= 16;
const int PIRPin= 14;

//ESPNOW//
// MAC placa LUIS: F6 CF A2 68 68 FC
// MAC placa PEDRO: CA:2B:96:2F:46:AA
// this is the MAC Address of the remote ESP server which receives these sensor readings
uint8_t remoteMac[] = {0xCA, 0x2B, 0x96, 0x2F, 0x46, 0xAA};
#define WIFI_CHANNEL 4
volatile boolean callbackCalled;

//SLEEP//
void gotoSleep() ;
#define SLEEP_SECS 15 * 60 // 15 minutes
#define SEND_TIMEOUT 245  // 245 millis seconds timeout 

// keep in sync with slave struct
struct __attribute__((packed)) SENSOR_DATA {
    bool tactil = false;
    bool presencia = false;
} sensorData;



void setup() {
  Serial.begin(115200); 
  //SENSOR TACTIL//
  pinMode(sensorPin, INPUT);
  //SENSOR PRESENCIA//
  pinMode(LEDPin, OUTPUT);
  pinMode(PIRPin, INPUT);
  
  Serial.println();
  Serial.println("Status\tTactil \tPresencia");
  
  //ESPNOW
  WiFi.mode(WIFI_STA); // Station mode for esp-now sensor node
  WiFi.disconnect();

  Serial.printf("This mac: %s, ", WiFi.macAddress().c_str()); 
  Serial.printf("target mac: %02x%02x%02x%02x%02x%02x", remoteMac[0], remoteMac[1], remoteMac[2], remoteMac[3], remoteMac[4], remoteMac[5]); 
  Serial.printf(", channel: %i\n", WIFI_CHANNEL); 

  if (esp_now_init() != 0) {
    Serial.println("*** ESP_Now init failed");
    gotoSleep();
  }

  esp_now_set_self_role(ESP_NOW_ROLE_CONTROLLER);
  esp_now_add_peer(remoteMac, ESP_NOW_ROLE_SLAVE, WIFI_CHANNEL, NULL, 0);

  esp_now_register_send_cb([](uint8_t* mac, uint8_t sendStatus) {
    Serial.printf("send_cb, send done, status = %i\n", sendStatus);
    callbackCalled = true;
  });

  callbackCalled = false;

  uint8_t bs[sizeof(sensorData)];
  memcpy(bs, &sensorData, sizeof(sensorData));
  
}

void loop() {
  if (callbackCalled || (millis() > SEND_TIMEOUT)) {
    gotoSleep();
  }
  else {

  //SENSOR PRESENCIA//
  int value= digitalRead(PIRPin);
 
  if (value == HIGH)
  {
    sensorData.presencia = true;
    digitalWrite(LEDPin, HIGH);
    delay(50);
    digitalWrite(LEDPin, LOW);
    delay(50);
  }
  else
  {
    sensorData.presencia = false;
    digitalWrite(LEDPin, LOW);
  }

//SENSOR TACTIL
    int estado = digitalRead(sensorPin);

   //mandar mensaje a puerto serie en función del valor leido
   if (estado == HIGH)
   {
    sensorData.tactil = true;
      Serial.println("Contacto detectado");   
      //aquí se ejecutarían las acciones
      digitalWrite(13,HIGH);
      delay(1000);
   }
   else{
    sensorData.tactil=false;
   }
   
   digitalWrite(13,LOW);
   
    //Serial.printf("presencia=%01f, tactil=%01f", sensorData.presencia, sensorData.tactil);
    Serial.print(sensorData.presencia, 1);
    Serial.print("\t\t");
    Serial.print(sensorData.tactil, 1);
    Serial.print("\t\t");
    //if (sensorData.tactil == true || sensorData.presencia == true){
      esp_now_send(remoteMac, (uint8_t *)&sensorData, sizeof(sensorData));
    //}
  }
}

void gotoSleep() {
  // add some randomness to avoid collisions with multiple devices
  int sleepSecs = SLEEP_SECS + ((uint8_t)RANDOM_REG32/2); 
  Serial.printf("Up for %i ms, going to sleep for %i secs...\n", millis(), sleepSecs); 
  ESP.deepSleep(sleepSecs * 1000000, RF_NO_CAL);
}
