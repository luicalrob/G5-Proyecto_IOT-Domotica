/**
 * 
 * Author: Andreas Spiess, 2017
 * Slightly adapted by Diy_bloke 2020
  This sketch receives ESP-Now message and sends it as an MQTT messge
  It is heavily based on of Anthony's gateway setch sketch
https://github.com/HarringayMakerSpace/ESP-Now
Anthony Elder
 */
#include <ESP8266WiFi.h>
#include "PubSubClient.h"

extern "C" {
  #include "user_interface.h"
  #include <espnow.h>
}


//-------- Customise the above values --------
#define SENDTOPIC "infind/ESPNow/key"
#define COMMANDTOPIC "ESPNow/command"
#define SERVICETOPIC "ESPNow/service"

#define Topic_Tiempo "Infind/ESPNOW/Meteorologia"
#define Topic_Estado "Infind/ESPNOW/Estado"

/* Set a private Mac Address
 *  http://serverfault.com/questions/40712/what-range-of-mac-addresses-can-i-safely-use-for-my-virtual-machines
 * Note: the point of setting a specific MAC is so you can replace this Gateway ESP8266 device with a new one
 * and the new gateway will still pick up the remote sensors which are still sending to the old MAC 
 */
 //48:3F:DA:0C:BA:34
 //CA:2B:96:2F:46:AA Mac de Pedro
 //F6:CF:A2:68:68:FC MAC de Luis
 uint8_t mac1[] = {0xF6, 0xCF, 0xA2, 0x68, 0x68, 0xFC};// MAC de Master 1
 uint8_t mac2[] = {0xF6, 0xCF, 0xA2, 0x68, 0x68, 0xFC};// MAC de MAster 2
 uint8_t mac3[] = {0xCA, 0x2B, 0x96, 0x2F, 0x46, 0xAA};// MAC de Master 3
 
uint8_t mac[] = {0xF6, 0xCF, 0xA2, 0x68, 0x68, 0xFC};// your MAC
void initVariant() {
  //wifi_set_macaddr(SOFTAP_IF, &mac[0]);
}
//char *ssid      = "infind";               // Set you WiFi SSID
//char *password  = "1518wifi";               // Set you WiFi password

char *ssid      = "MiFibra-1738";               // Set you WiFi SSID
char *password  = "zn6TAwZx";

IPAddress server(192, 168, 1, 36);//your MQTT Broker address

const char deviceTopic[] = "ESPNOW/";

WiFiClient wifiClient;
PubSubClient client("iot.ac.uma.es", 1883, wifiClient);

String deviceMac;

// keep in sync with ESP_NOW sensor struct
struct __attribute__((packed)) SENSOR_DATA {
  bool tactil;
  bool presencia;
} sensorData_Est;

struct mensaje1 {
  bool tactil;
  bool presencia;
  bool ok;
};

struct __attribute__((packed)) SENSOR_DATA_Temp {
    float temp;
    float humidity;
    float lum;
} sensorData_Temp;

struct mensaje2 {
  float temp;
    float humidity;
    float lum;
};
int tipo=0; //tipo de dato que le llega, al principio no es ninguno de los dos(1 o 2);

volatile boolean haveReading = false;

/* Presently it doesn't seem posible to use both WiFi and ESP-NOW at the
 * same time. This gateway gets around that be starting just ESP-NOW and
 * when a message is received switching on WiFi to sending the MQTT message
 * to Watson, and then restarting the ESP. The restart is necessary as 
 * ESP-NOW doesn't seem to work again even after WiFi is disabled.
 * Hopefully this will get fixed in the ESP SDK at some point.
 */

int heartBeat;


void setup() {
  Serial.begin(115200); 
  Serial.println();
  Serial.println();
  Serial.println("ESP_Now Controller");
    Serial.println();

  WiFi.mode(WIFI_AP);
  Serial.print("This node AP mac: "); Serial.println(WiFi.softAPmacAddress());
  Serial.print("This node STA mac: "); Serial.println(WiFi.macAddress());

  initEspNow();  
  Serial.println("Setup done");
}


void loop() {
  if (millis()-heartBeat > 30000) {
    Serial.println("Waiting for ESP-NOW messages...");
    heartBeat = millis();
  }

  if (haveReading) {
    haveReading = false;
    if (WiFi.status() != WL_CONNECTED)
      {
        wifiConnect();
      }
    if (!client.connected()) 
      {
        reconnectMQTT();
      }
    sendToBroker(); 
    
    client.disconnect();
    //delay(200);
    ESP.restart(); // <----- Reboots to re-enable ESP-NOW
  }
}

void sendToBroker() {
  if(tipo==1)
  {
    //Serial.println(sensorData_Est.tactil);
    String payload = "{";
    payload += "\"tactil\":\"" + String(sensorData_Est.tactil);
    payload += "\",\"presencia\":\""+String(sensorData_Est.presencia);
    payload += "\"}";
    Serial.println(payload);
    publishMQTT(Topic_Estado,payload);
  }
  if(tipo==2)
  {
    //Serial.println(sensorData_Est.tactil);
    String payload = "{";
    payload += "\"Temperatura\":\"" + String(sensorData_Temp.temp);
    payload += "\",\"Humedad\":\""+String(sensorData_Temp.humidity);
    payload += "\",\"Luminosidad\":\""+String(sensorData_Temp.lum);
    payload += "\"}";
    Serial.println(payload);
    publishMQTT(Topic_Tiempo,payload);
  }
}

void initEspNow() {

  if (esp_now_init()!=0) {
    Serial.println("*** ESP_Now init failed");
    ESP.restart();
  }

  esp_now_set_self_role(ESP_NOW_ROLE_COMBO);

  esp_now_register_recv_cb([](uint8_t *mac, uint8_t *data, uint8_t len) {

    deviceMac = "";
    deviceMac += String(mac[0], HEX);
    deviceMac += String(mac[1], HEX);
    deviceMac += String(mac[2], HEX);
    deviceMac += String(mac[3], HEX);
    deviceMac += String(mac[4], HEX);
    deviceMac += String(mac[5], HEX);
     
    if(mac==mac3)
    {
      tipo=1;
      memcpy(&sensorData_Est, data, sizeof(sensorData_Est));
        struct mensaje1 mi_mensaje1;
      memcpy(&mi_mensaje1, data, sizeof(mi_mensaje1));
      
      Serial.print("Message received from device: "); 
      Serial.println(deviceMac);
      //Serial.printf(" Tactil=%0.2f, Hum=%0.0f%%", sensorData.tactil, sensorData.presencia); 
      Serial.print("\nBytes recibidos:");   
      Serial.println(len); 
      Serial.print("Tactil:");   
      Serial.println(mi_mensaje1.tactil); 
      Serial.print("Presencia:");   
      Serial.println(mi_mensaje1.presencia); 
    }
    if(mac==mac1 || mac==mac2)
    {
      tipo=2;
      memcpy(&sensorData_Temp, data, sizeof(sensorData_Temp));
      struct mensaje2 mi_mensaje2;
      memcpy(&mi_mensaje2, data, sizeof(mi_mensaje2));
      
      Serial.print("Message received from device: "); 
      Serial.println(deviceMac);
      //Serial.printf(" Tactil=%0.2f, Hum=%0.0f%%", sensorData.tactil, sensorData.presencia); 
      Serial.print("\nBytes recibidos:");   
      Serial.println(len); 
      Serial.printf(" Temperatura=%0.2f, Humedad=%0.0f%%, Luminosidad=%0.2f%%", sensorData_Temp.temp, sensorData_Temp.humidity, sensorData_Temp.lum); 
    }
    haveReading = true;
  });
}

void wifiConnect() {
  WiFi.mode(WIFI_STA);
  Serial.println();
  Serial.print("Connecting to "); Serial.print(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
     delay(250);
     Serial.print(".");
  }  
  Serial.print("\nWiFi connected, IP address: "); Serial.println(WiFi.localIP());
}

void publishMQTT(String topic, String message) {
  Serial.println("Publish");
  if (!client.connected()) {
    reconnectMQTT();
  }
  if(tipo==1)
  {
  client.publish(Topic_Estado, message.c_str());
  }
  if(tipo==2)
  {
    client.publish(Topic_Tiempo, message.c_str());
  }
}

void reconnectMQTT() {
  Serial.println(" Loop until we're reconnected");
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP-NOWClient-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    
      if (client.connect(clientId.c_str(),"infind","zancudo")) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      client.publish(SERVICETOPIC, "I am live");
      // ... and resubscribe
      //  client.subscribe("inTopic");
    } else {
      Serial.print("failed, rc = ");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}
